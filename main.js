/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CopyImageTextPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CopyImageTextPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "copy-text",
      name: "\u590D\u5236\u6587\u672C\u548C\u56FE\u7247",
      editorCallback: (editor, view) => this.copyTextAndImages(editor, view),
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "c" }]
    });
  }
  async copyTextAndImages(editor, view) {
    try {
      console.log("\u5F00\u59CB\u590D\u5236\u6587\u672C\u548C\u56FE\u7247");
      let content = editor.getSelection();
      if (!content) {
        content = editor.getValue();
        console.log("\u6CA1\u6709\u9009\u4E2D\u6587\u672C,\u590D\u5236\u6574\u4E2A\u6587\u6863");
      } else {
        console.log("\u590D\u5236\u9009\u4E2D\u7684\u6587\u672C");
      }
      if (!view.file) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6\u4FE1\u606F");
        new import_obsidian.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6\u4FE1\u606F\uFF0C\u590D\u5236\u53EF\u80FD\u4E0D\u5B8C\u6574");
        return;
      }
      const htmlContent = await this.convertToHtml(content, view.file);
      await navigator.clipboard.write([
        new ClipboardItem({
          "text/html": new Blob([htmlContent], { type: "text/html" }),
          "text/plain": new Blob([content], { type: "text/plain" })
        })
      ]);
      console.log("\u6210\u529F\u590D\u5236\u5230\u526A\u8D34\u677F");
      new import_obsidian.Notice("\u5185\u5BB9\u5DF2\u6210\u529F\u590D\u5236");
    } catch (error) {
      console.error("\u590D\u5236\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF:", error);
      new import_obsidian.Notice("\u590D\u5236\u5931\u8D25,\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u4EE5\u83B7\u53D6\u66F4\u591A\u4FE1\u606F");
    }
  }
  async convertToHtml(content, file) {
    const imageRegex = /!\[\[(.*?)\]\]/g;
    const replacements = await Promise.all(Array.from(content.matchAll(imageRegex)).map((match) => this.replaceImageWithBase64(match[1], file)));
    let htmlContent = content;
    replacements.forEach(({ original, replacement }) => {
      htmlContent = htmlContent.replace(original, replacement);
    });
    htmlContent = htmlContent.replace(/^---$/gm, '<hr style="border: 0; border-top: 1px solid #ddd; margin: 20px 0;">');
    htmlContent = htmlContent.replace(/```([\s\S]*?)```/g, (match, code) => {
      const escapedCode = this.escapeHtml(code.trim());
      return `<pre style="background-color: #f6f8fa; border-radius: 3px; padding: 16px; overflow: auto;"><code style="font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: 14px; line-height: 1.5;">${escapedCode}</code></pre>`;
    });
    htmlContent = htmlContent.replace(/^(#+)\s+(.*?)$/gm, (match, hashes, title) => {
      const level = hashes.length;
      const fontSize = 28 - level * 2;
      return `<h${level} style="font-size: ${fontSize}px; font-weight: bold; margin: 10px 0;">${title}</h${level}>`;
    });
    htmlContent = htmlContent.replace(/\n/g, "<br>").replace(/\*\*(.+?)\*\*/g, "<strong>$1</strong>").replace(/\*(.+?)\*/g, "<em>$1</em>").replace(/`(.+?)`/g, '<code style="background-color: #f0f0f0; padding: 2px 4px; border-radius: 3px;">$1</code>').replace(/\[(.+?)\]\((.+?)\)/g, '<a href="$2" style="color: #576b95; text-decoration: none;">$1</a>');
    return `<div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; color: #333; line-height: 1.6;">${htmlContent}</div>`;
  }
  async replaceImageWithBase64(imagePath, file) {
    try {
      console.log(`\u5C1D\u8BD5\u5904\u7406\u56FE\u7247: ${imagePath}`);
      const fileName = imagePath.split("/").pop() || imagePath;
      console.log(`\u56FE\u7247\u6587\u4EF6\u540D: ${fileName}`);
      const imageFile = this.app.vault.getFiles().find((f) => f.name.toLowerCase().includes(fileName.toLowerCase()));
      if (!imageFile) {
        console.warn(`\u56FE\u7247\u672A\u627E\u5230: ${imagePath}`);
        return { original: `![[${imagePath}]]`, replacement: `[\u56FE\u7247\u672A\u627E\u5230: ${imagePath}]` };
      }
      console.log(`\u627E\u5230\u56FE\u7247\u6587\u4EF6: ${imageFile.path}`);
      const stat = await this.app.vault.adapter.stat(imageFile.path);
      if (stat) {
        const fileSize = stat.size;
        const maxSize = 10 * 1024 * 1024;
        if (fileSize > maxSize) {
          console.warn(`\u56FE\u7247\u6587\u4EF6\u8FC7\u5927: ${fileSize} \u5B57\u8282\uFF0C\u8D85\u8FC7 ${maxSize} \u5B57\u8282\u9650\u5236`);
          return { original: `![[${imagePath}]]`, replacement: `[\u56FE\u7247\u6587\u4EF6\u8FC7\u5927: ${imagePath}]` };
        }
      }
      const imageArrayBuffer = await this.app.vault.readBinary(imageFile);
      console.log(`\u6210\u529F\u8BFB\u53D6\u56FE\u7247\u6570\u636E,\u5927\u5C0F: ${imageArrayBuffer.byteLength} \u5B57\u8282`);
      let base64;
      try {
        base64 = await this.arrayBufferToBase64(imageArrayBuffer);
        console.log(`\u6210\u529F\u8F6C\u6362\u4E3ABase64,\u957F\u5EA6: ${base64.length}`);
      } catch (error) {
        console.error(`Base64\u8F6C\u6362\u5931\u8D25:`, error);
        return { original: `![[${imagePath}]]`, replacement: `[\u56FE\u7247Base64\u8F6C\u6362\u5931\u8D25: ${imagePath}]` };
      }
      const mimeType = this.getMimeType(imagePath);
      console.log(`\u6210\u529F\u5904\u7406\u56FE\u7247: ${imagePath}, MIME\u7C7B\u578B: ${mimeType}`);
      return {
        original: `![[${imagePath}]]`,
        replacement: `<img src="data:${mimeType};base64,${base64}" alt="${imagePath}" style="max-width: 100%;">`
      };
    } catch (error) {
      console.error(`\u5904\u7406\u56FE\u7247\u65F6\u51FA\u9519 (${imagePath}):`, error);
      console.error("\u9519\u8BEF\u5806\u6808:", error.stack);
      return { original: `![[${imagePath}]]`, replacement: `[\u56FE\u7247\u5904\u7406\u9519\u8BEF: ${imagePath}]` };
    }
  }
  arrayBufferToBase64(buffer) {
    return new Promise((resolve, reject) => {
      const blob = new Blob([buffer]);
      const reader = new FileReader();
      reader.onload = () => {
        var _a;
        const base64 = (_a = reader.result) == null ? void 0 : _a.toString().split(",")[1];
        resolve(base64 || "");
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }
  getMimeType(filename) {
    var _a;
    const ext = (_a = filename.split(".").pop()) == null ? void 0 : _a.toLowerCase();
    console.log(`\u6587\u4EF6\u6269\u5C55\u540D: ${ext}`);
    switch (ext) {
      case "jpg":
      case "jpeg":
        return "image/jpeg";
      case "png":
        return "image/png";
      case "gif":
        return "image/gif";
      case "webp":
        return "image/webp";
      case "svg":
        return "image/svg+xml";
      default:
        console.warn(`\u672A\u77E5\u7684\u6587\u4EF6\u6269\u5C55\u540D: ${ext},\u4F7F\u7528\u9ED8\u8BA4MIME\u7C7B\u578B`);
        return "image/png";
    }
  }
  escapeHtml(unsafe) {
    return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  }
};
